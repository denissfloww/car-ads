[{"C:\\study\\car-ads\\client\\src\\index.tsx":"1","C:\\study\\car-ads\\client\\src\\reportWebVitals.ts":"2","C:\\study\\car-ads\\client\\src\\redux\\store.ts":"3","C:\\study\\car-ads\\client\\src\\App.tsx":"4","C:\\study\\car-ads\\client\\src\\redux\\slices\\authSlice.ts":"5","C:\\study\\car-ads\\client\\src\\styles\\muiStyles.ts":"6","C:\\study\\car-ads\\client\\src\\Router.tsx":"7","C:\\study\\car-ads\\client\\src\\components\\Footer.tsx":"8","C:\\study\\car-ads\\client\\src\\components\\NavBar.tsx":"9","C:\\study\\car-ads\\client\\src\\Links.ts":"10","C:\\study\\car-ads\\client\\src\\services\\LocalStorageService.ts":"11","C:\\study\\car-ads\\client\\src\\services\\AuthService.ts":"12","C:\\study\\car-ads\\client\\src\\utils\\HelperFunc.ts":"13","C:\\study\\car-ads\\client\\src\\components\\PersonalAccountButton.tsx":"14","C:\\study\\car-ads\\client\\src\\components\\AuthButton.tsx":"15","C:\\study\\car-ads\\client\\src\\pages\\Auth\\SignUpPage.tsx":"16","C:\\study\\car-ads\\client\\src\\pages\\Main\\NotFoundPage.tsx":"17","C:\\study\\car-ads\\client\\src\\pages\\Main\\PersonalAccountPage.tsx":"18","C:\\study\\car-ads\\client\\src\\pages\\Main\\MainPage.tsx":"19","C:\\study\\car-ads\\client\\src\\pages\\Auth\\LoginPage.tsx":"20","C:\\study\\car-ads\\client\\src\\BackEndUrl.ts":"21","C:\\study\\car-ads\\client\\src\\components\\ErrorBox.tsx":"22","C:\\study\\car-ads\\client\\src\\components\\DemoCreds.tsx":"23","C:\\study\\car-ads\\client\\src\\components\\TabPanel.tsx":"24","C:\\study\\car-ads\\client\\src\\pages\\Main\\AppendAdPage.tsx":"25"},{"size":663,"mtime":1627446124143,"results":"26","hashOfConfig":"27"},{"size":425,"mtime":1627446124305,"results":"28","hashOfConfig":"27"},{"size":387,"mtime":1627446124294,"results":"29","hashOfConfig":"27"},{"size":458,"mtime":1627446124040,"results":"30","hashOfConfig":"27"},{"size":2618,"mtime":1627446124288,"results":"31","hashOfConfig":"27"},{"size":11883,"mtime":1627449970053,"results":"32","hashOfConfig":"27"},{"size":1558,"mtime":1627447881848,"results":"33","hashOfConfig":"27"},{"size":286,"mtime":1627446124085,"results":"34","hashOfConfig":"27"},{"size":1840,"mtime":1627446124106,"results":"35","hashOfConfig":"27"},{"size":176,"mtime":1627447881843,"results":"36","hashOfConfig":"27"},{"size":459,"mtime":1627446124335,"results":"37","hashOfConfig":"27"},{"size":518,"mtime":1627446124328,"results":"38","hashOfConfig":"27"},{"size":282,"mtime":1627446124416,"results":"39","hashOfConfig":"27"},{"size":1600,"mtime":1627447941381,"results":"40","hashOfConfig":"27"},{"size":615,"mtime":1627446919453,"results":"41","hashOfConfig":"27"},{"size":6512,"mtime":1627446124217,"results":"42","hashOfConfig":"27"},{"size":702,"mtime":1627446969130,"results":"43","hashOfConfig":"27"},{"size":1083,"mtime":1627446124258,"results":"44","hashOfConfig":"27"},{"size":560,"mtime":1627446124235,"results":"45","hashOfConfig":"27"},{"size":4731,"mtime":1627446124181,"results":"46","hashOfConfig":"27"},{"size":71,"mtime":1627384849546,"results":"47","hashOfConfig":"27"},{"size":495,"mtime":1627446124079,"results":"48","hashOfConfig":"27"},{"size":393,"mtime":1627446124068,"results":"49","hashOfConfig":"27"},{"size":521,"mtime":1627447378432,"results":"50","hashOfConfig":"27"},{"size":2389,"mtime":1627451783343,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1uf0s3t",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\study\\car-ads\\client\\src\\index.tsx",[],[],"C:\\study\\car-ads\\client\\src\\reportWebVitals.ts",[],"C:\\study\\car-ads\\client\\src\\redux\\store.ts",[],"C:\\study\\car-ads\\client\\src\\App.tsx",[],"C:\\study\\car-ads\\client\\src\\redux\\slices\\authSlice.ts",[],"C:\\study\\car-ads\\client\\src\\styles\\muiStyles.ts",["106","107"],"C:\\study\\car-ads\\client\\src\\Router.tsx",[],"C:\\study\\car-ads\\client\\src\\components\\Footer.tsx",[],"C:\\study\\car-ads\\client\\src\\components\\NavBar.tsx",[],"C:\\study\\car-ads\\client\\src\\Links.ts",[],"C:\\study\\car-ads\\client\\src\\services\\LocalStorageService.ts",[],"C:\\study\\car-ads\\client\\src\\services\\AuthService.ts",[],"C:\\study\\car-ads\\client\\src\\utils\\HelperFunc.ts",[],"C:\\study\\car-ads\\client\\src\\components\\PersonalAccountButton.tsx",[],"C:\\study\\car-ads\\client\\src\\components\\AuthButton.tsx",[],"C:\\study\\car-ads\\client\\src\\pages\\Auth\\SignUpPage.tsx",["108"],"import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectAuthState, cancel, signup, setAuthError, clearAuthError } from '../../redux/slices/authSlice';\n\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\nimport CarIcon from '../../svg/logo.png';\nimport { Button, IconButton, InputAdornment, Link, TextField, Typography } from '@material-ui/core';\nimport { Paper } from '@material-ui/core';\nimport { useAuthPageStyles } from '../../styles/muiStyles';\n\nimport PersonIcon from '@material-ui/icons/Person';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport LockIcon from '@material-ui/icons/Lock';\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\n\nimport { loginLink } from '../../Links';\nimport { Link as RouterLink, useHistory } from 'react-router-dom';\nimport ErrorBox from '../../components/ErrorBox';\n\ninterface InputValues {\n  username: string;\n  password: string;\n  confirmPassword: string;\n}\n\nconst validationSchema = yup.object({\n  username: yup\n    .string()\n    .required('Required')\n    .max(20, 'Должно быть не более 20 символов')\n    .min(3, 'Должно быть не менее 3 символов')\n    .matches(/^[a-zA-Z0-9-_]*$/, 'Допускаются только буквы, тире и символы подчеркивания'),\n  password: yup.string().required('Required').min(6, 'Должно быть не менее 6 символов'),\n  confirmPassword: yup.string().required('Required').min(6, 'Должно быть не менее 6 символов'),\n});\n\nconst SignupPage = () => {\n  const classes = useAuthPageStyles();\n  const dispatch = useDispatch();\n  const { loading, error } = useSelector(selectAuthState);\n  const [showPass, setShowPass] = useState<boolean>(false);\n  const [showConfirmPass, setShowConfirmPass] = useState<boolean>(false);\n\n  const { register, handleSubmit, errors } = useForm({\n    mode: 'onChange',\n    resolver: yupResolver(validationSchema),\n  });\n  const history = useHistory();\n  const handleSignUp = ({ username, password, confirmPassword }: InputValues) => {\n    if (password !== confirmPassword) {\n      return dispatch(setAuthError('Пароли не совпадают'));\n    }\n    dispatch(signup({ username, password }, history));\n  };\n\n  const handleCancel = () => {\n    dispatch(cancel());\n  };\n\n  return (\n    <div>\n      <Paper className={classes.root} elevation={2}>\n        <form onSubmit={handleSubmit(handleSignUp)} className={classes.form}>\n          <img src={CarIcon} alt='bug-logo' className={classes.titleLogo} />\n          <Typography variant='body1' className={classes.headerText}>\n            Регистрация\n          </Typography>\n          <div className={classes.inputField}>\n            <TextField\n              required\n              fullWidth\n              inputRef={register}\n              type='text'\n              name='username'\n              label='Логин'\n              variant='outlined'\n              error={'username' in errors}\n              helperText={'username' in errors ? errors.username.message : ''}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position='start'>\n                    <PersonIcon className={classes.iconColor} />\n                  </InputAdornment>\n                ),\n              }}\n            />\n          </div>\n          <div className={classes.inputField}>\n            <TextField\n              required\n              fullWidth\n              inputRef={register}\n              type={showPass ? 'text' : 'password'}\n              name='password'\n              label='Пароль'\n              variant='outlined'\n              error={'password' in errors}\n              helperText={'password' in errors ? errors.password.message : ''}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position='end'>\n                    <IconButton size='small' onClick={() => setShowPass(prevState => !prevState)}>\n                      {showPass ? <VisibilityOffIcon /> : <VisibilityIcon />}\n                    </IconButton>\n                  </InputAdornment>\n                ),\n                startAdornment: (\n                  <InputAdornment position='start'>\n                    <LockIcon className={classes.iconColor} />\n                  </InputAdornment>\n                ),\n              }}\n            />\n          </div>\n          <div className={classes.inputField}>\n            <TextField\n              required\n              fullWidth\n              inputRef={register}\n              type={showConfirmPass ? 'text' : 'password'}\n              label='Подтверждение пароля'\n              name='confirmPassword'\n              variant='outlined'\n              error={'confirmPassword' in errors}\n              helperText={'confirmPassword' in errors ? errors.confirmPassword.message : ''}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position='end'>\n                    <IconButton size='small' onClick={() => setShowConfirmPass(prevState => !prevState)}>\n                      {showConfirmPass ? <VisibilityOffIcon /> : <VisibilityIcon />}\n                    </IconButton>\n                  </InputAdornment>\n                ),\n                startAdornment: (\n                  <InputAdornment position='start'>\n                    <LockIcon className={classes.iconColor} />\n                  </InputAdornment>\n                ),\n              }}\n            />\n          </div>\n          <Button\n            color='inherit'\n            variant='contained'\n            size='large'\n            fullWidth\n            startIcon={<PersonAddIcon />}\n            type='submit'\n            className={classes.submitButton}\n            disabled={loading}\n          >\n            Зарегистрироваться\n          </Button>\n        </form>\n        <Typography variant='body1' className={classes.footerText}>\n          Уже есть аккаунт?{' '}\n          <Link color='primary' to={loginLink} component={RouterLink}>\n            Войти\n          </Link>\n        </Typography>\n        {error && <ErrorBox errorMsg={error} clearErrorMsg={() => dispatch(clearAuthError())} />}\n      </Paper>\n    </div>\n  );\n};\n\nexport default SignupPage;\n","C:\\study\\car-ads\\client\\src\\pages\\Main\\NotFoundPage.tsx",[],"C:\\study\\car-ads\\client\\src\\pages\\Main\\PersonalAccountPage.tsx",["109"],"import React from 'react';\nimport { usePersonalAccountStyles } from '../../styles/muiStyles';\nimport { Paper, Tab } from '@material-ui/core';\nimport Tabs from '@material-ui/core/Tabs';\nimport TabPanel from '../../components/TabPanel';\n\nconst PersonalAccountPage = () => {\n  const classes = usePersonalAccountStyles();\n  const [value, setValue] = React.useState(0);\n  const handleChange = (event: any, newValue: React.SetStateAction<number>) => {\n    setValue(newValue);\n  };\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <div className={classes.tabs}>\n          <Tabs value={value} onChange={handleChange}>\n            <Tab label='Объявления' />\n            <Tab label='Настройки' />\n          </Tabs>\n          <TabPanel index={0} value={value}>\n            Тут мои объявления\n          </TabPanel>\n          <TabPanel index={1} value={value}>\n            Тут мои найстройки\n          </TabPanel>\n        </div>\n      </Paper>\n    </div>\n  );\n};\n\nexport default PersonalAccountPage;\n","C:\\study\\car-ads\\client\\src\\pages\\Main\\MainPage.tsx",[],"C:\\study\\car-ads\\client\\src\\pages\\Auth\\LoginPage.tsx",["110"],"import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login, selectAuthState, cancel, clearAuthError } from '../../redux/slices/authSlice';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\nimport CarIcon from '../../svg/logo.png';\nimport { Button, IconButton, InputAdornment, Link, TextField, Typography } from '@material-ui/core';\nimport { Paper } from '@material-ui/core';\nimport { useAuthPageStyles } from '../../styles/muiStyles';\n\nimport PersonIcon from '@material-ui/icons/Person';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport LockIcon from '@material-ui/icons/Lock';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport DemoCreds from '../../components/DemoCreds';\nimport { signupLink } from '../../Links';\nimport { Link as RouterLink } from 'react-router-dom';\nimport ErrorBox from '../../components/ErrorBox';\n\ninterface InputValues {\n  username: string;\n  password: string;\n}\n\nconst validationSchema = yup.object({\n  username: yup.string().required('Required'),\n  password: yup.string().required('Required'),\n});\n\nconst LoginPage = () => {\n  const classes = useAuthPageStyles();\n  const dispatch = useDispatch();\n  const { loading, error } = useSelector(selectAuthState);\n  const [showPass, setShowPass] = useState<boolean>(false);\n  const { register, handleSubmit, errors } = useForm({\n    mode: 'onChange',\n    resolver: yupResolver(validationSchema),\n  });\n  const history = useHistory();\n\n  const handleLogin = ({ username, password }: InputValues) => {\n    dispatch(login({ username, password }, history));\n  };\n\n  const handleCancel = () => {\n    dispatch(cancel());\n  };\n\n  return (\n    <div>\n      <Paper className={classes.root} elevation={2}>\n        <form onSubmit={handleSubmit(handleLogin)} className={classes.form}>\n          <img src={CarIcon} alt='bug-logo' className={classes.titleLogo} />\n          <Typography variant='body1' className={classes.headerText}>\n            Вход\n          </Typography>\n          <div className={classes.inputField}>\n            <TextField\n              required\n              fullWidth\n              inputRef={register}\n              type='text'\n              label='Логин'\n              name='username'\n              variant='outlined'\n              error={'username' in errors}\n              helperText={'username' in errors ? errors.username.message : ''}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position='start'>\n                    <PersonIcon className={classes.iconColor} />\n                  </InputAdornment>\n                ),\n              }}\n            />\n          </div>\n          <div className={classes.inputField}>\n            <TextField\n              required\n              fullWidth\n              inputRef={register}\n              type={showPass ? 'text' : 'password'}\n              label='Пароль'\n              name='password'\n              variant='outlined'\n              error={'password' in errors}\n              helperText={'password' in errors ? errors.password.message : ''}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position='end'>\n                    <IconButton size='small' onClick={() => setShowPass(prevState => !prevState)}>\n                      {showPass ? <VisibilityOffIcon /> : <VisibilityIcon />}\n                    </IconButton>\n                  </InputAdornment>\n                ),\n                startAdornment: (\n                  <InputAdornment position='start'>\n                    <LockIcon className={classes.iconColor} />\n                  </InputAdornment>\n                ),\n              }}\n            />\n          </div>\n          <Button\n            color='inherit'\n            variant='contained'\n            size='large'\n            fullWidth\n            startIcon={<ExitToAppIcon />}\n            type='submit'\n            className={classes.submitButton}\n            disabled={loading}\n          >\n            Войти\n          </Button>\n          <DemoCreds />\n        </form>\n        <Typography variant='body1' className={classes.footerText}>\n          Нет аккаунта?{' '}\n          <Link color='primary' to={signupLink} component={RouterLink}>\n            Зарегистрироваться\n          </Link>\n        </Typography>\n        {error && <ErrorBox errorMsg={error} clearErrorMsg={() => dispatch(clearAuthError())} />}\n      </Paper>\n    </div>\n  );\n};\n\nexport default LoginPage;\n","C:\\study\\car-ads\\client\\src\\BackEndUrl.ts",[],"C:\\study\\car-ads\\client\\src\\components\\ErrorBox.tsx",[],"C:\\study\\car-ads\\client\\src\\components\\DemoCreds.tsx",[],"C:\\study\\car-ads\\client\\src\\components\\TabPanel.tsx",["111"],"C:\\study\\car-ads\\client\\src\\pages\\Main\\AppendAdPage.tsx",[],{"ruleId":"112","severity":1,"message":"113","line":5,"column":5,"nodeType":"114","messageId":"115","endLine":5,"endColumn":10},{"ruleId":"112","severity":1,"message":"113","line":551,"column":3,"nodeType":"114","messageId":"115","endLine":551,"endColumn":8},{"ruleId":"112","severity":1,"message":"116","line":60,"column":9,"nodeType":"114","messageId":"115","endLine":60,"endColumn":21},{"ruleId":"117","severity":1,"message":"118","line":10,"column":32,"nodeType":"119","messageId":"120","endLine":10,"endColumn":35,"suggestions":"121"},{"ruleId":"112","severity":1,"message":"116","line":49,"column":9,"nodeType":"114","messageId":"115","endLine":49,"endColumn":21},{"ruleId":"117","severity":1,"message":"118","line":5,"column":26,"nodeType":"119","messageId":"120","endLine":5,"endColumn":29,"suggestions":"122"},"unused-imports/no-unused-vars","'theme' is defined but never used. Allowed unused args must match /^_/u.","Identifier","unusedVar","'handleCancel' is assigned a value but never used. Allowed unused vars must match /^_/u.","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["123","124"],["125","126"],{"messageId":"127","fix":"128","desc":"129"},{"messageId":"130","fix":"131","desc":"132"},{"messageId":"127","fix":"133","desc":"129"},{"messageId":"130","fix":"134","desc":"132"},"suggestUnknown",{"range":"135","text":"136"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"135","text":"137"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"138","text":"136"},{"range":"138","text":"137"},[396,399],"unknown","never",[149,152]]