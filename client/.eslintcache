[{"C:\\study\\car-ads\\client\\src\\index.tsx":"1","C:\\study\\car-ads\\client\\src\\reportWebVitals.ts":"2","C:\\study\\car-ads\\client\\src\\App.tsx":"3","C:\\study\\car-ads\\client\\src\\redux\\store.ts":"4","C:\\study\\car-ads\\client\\src\\styles\\muiStyles.ts":"5","C:\\study\\car-ads\\client\\src\\redux\\slices\\authSlice.ts":"6","C:\\study\\car-ads\\client\\src\\components\\NavBar.tsx":"7","C:\\study\\car-ads\\client\\src\\components\\Footer.tsx":"8","C:\\study\\car-ads\\client\\src\\Router.tsx":"9","C:\\study\\car-ads\\client\\src\\redux\\slices\\appendSlice.ts":"10","C:\\study\\car-ads\\client\\src\\services\\LocalStorageService.ts":"11","C:\\study\\car-ads\\client\\src\\services\\AuthService.ts":"12","C:\\study\\car-ads\\client\\src\\Links.ts":"13","C:\\study\\car-ads\\client\\src\\utils\\HelperFunc.ts":"14","C:\\study\\car-ads\\client\\src\\components\\AuthButton.tsx":"15","C:\\study\\car-ads\\client\\src\\components\\PersonalAccountButton.tsx":"16","C:\\study\\car-ads\\client\\src\\pages\\Auth\\LoginPage.tsx":"17","C:\\study\\car-ads\\client\\src\\pages\\Auth\\SignUpPage.tsx":"18","C:\\study\\car-ads\\client\\src\\pages\\Main\\PersonalAccountPage.tsx":"19","C:\\study\\car-ads\\client\\src\\pages\\Main\\NotFoundPage.tsx":"20","C:\\study\\car-ads\\client\\src\\pages\\Main\\MainPage.tsx":"21","C:\\study\\car-ads\\client\\src\\pages\\Main\\AppendAdPage.tsx":"22","C:\\study\\car-ads\\client\\src\\BackEndUrl.ts":"23","C:\\study\\car-ads\\client\\src\\components\\ErrorBox.tsx":"24","C:\\study\\car-ads\\client\\src\\components\\DemoCreds.tsx":"25","C:\\study\\car-ads\\client\\src\\components\\TabPanel.tsx":"26","C:\\study\\car-ads\\client\\src\\components\\AutoCompletes\\AutoComplete.tsx":"27","C:\\study\\car-ads\\client\\src\\components\\ImageUploader.tsx":"28"},{"size":663,"mtime":1627446124143,"results":"29","hashOfConfig":"30"},{"size":425,"mtime":1627446124305,"results":"31","hashOfConfig":"30"},{"size":458,"mtime":1627446124040,"results":"32","hashOfConfig":"30"},{"size":481,"mtime":1627531001141,"results":"33","hashOfConfig":"30"},{"size":12663,"mtime":1627628501736,"results":"34","hashOfConfig":"30"},{"size":2618,"mtime":1627446124288,"results":"35","hashOfConfig":"30"},{"size":1840,"mtime":1627446124106,"results":"36","hashOfConfig":"30"},{"size":286,"mtime":1627446124085,"results":"37","hashOfConfig":"30"},{"size":1558,"mtime":1627447881848,"results":"38","hashOfConfig":"30"},{"size":2823,"mtime":1627647047728,"results":"39","hashOfConfig":"30"},{"size":459,"mtime":1627446124335,"results":"40","hashOfConfig":"30"},{"size":518,"mtime":1627446124328,"results":"41","hashOfConfig":"30"},{"size":176,"mtime":1627447881843,"results":"42","hashOfConfig":"30"},{"size":282,"mtime":1627446124416,"results":"43","hashOfConfig":"30"},{"size":615,"mtime":1627446919453,"results":"44","hashOfConfig":"30"},{"size":1600,"mtime":1627447941381,"results":"45","hashOfConfig":"30"},{"size":4731,"mtime":1627446124181,"results":"46","hashOfConfig":"30"},{"size":6512,"mtime":1627446124217,"results":"47","hashOfConfig":"30"},{"size":1083,"mtime":1627446124258,"results":"48","hashOfConfig":"30"},{"size":702,"mtime":1627446969130,"results":"49","hashOfConfig":"30"},{"size":560,"mtime":1627446124235,"results":"50","hashOfConfig":"30"},{"size":6527,"mtime":1627647047723,"results":"51","hashOfConfig":"30"},{"size":71,"mtime":1627384849546,"results":"52","hashOfConfig":"30"},{"size":495,"mtime":1627446124079,"results":"53","hashOfConfig":"30"},{"size":393,"mtime":1627446124068,"results":"54","hashOfConfig":"30"},{"size":521,"mtime":1627447378432,"results":"55","hashOfConfig":"30"},{"size":1219,"mtime":1627639748833,"results":"56","hashOfConfig":"30"},{"size":2714,"mtime":1627628615812,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"1uf0s3t",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"60"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"60"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\study\\car-ads\\client\\src\\index.tsx",[],[],"C:\\study\\car-ads\\client\\src\\reportWebVitals.ts",[],"C:\\study\\car-ads\\client\\src\\App.tsx",[],"C:\\study\\car-ads\\client\\src\\redux\\store.ts",[],"C:\\study\\car-ads\\client\\src\\styles\\muiStyles.ts",["120","121"],"C:\\study\\car-ads\\client\\src\\redux\\slices\\authSlice.ts",[],"C:\\study\\car-ads\\client\\src\\components\\NavBar.tsx",[],"C:\\study\\car-ads\\client\\src\\components\\Footer.tsx",[],"C:\\study\\car-ads\\client\\src\\Router.tsx",[],"C:\\study\\car-ads\\client\\src\\redux\\slices\\appendSlice.ts",["122","123","124","125"],"C:\\study\\car-ads\\client\\src\\services\\LocalStorageService.ts",[],"C:\\study\\car-ads\\client\\src\\services\\AuthService.ts",[],"C:\\study\\car-ads\\client\\src\\Links.ts",[],"C:\\study\\car-ads\\client\\src\\utils\\HelperFunc.ts",[],"C:\\study\\car-ads\\client\\src\\components\\AuthButton.tsx",[],"C:\\study\\car-ads\\client\\src\\components\\PersonalAccountButton.tsx",[],"C:\\study\\car-ads\\client\\src\\pages\\Auth\\LoginPage.tsx",["126"],"import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useHistory } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login, selectAuthState, cancel, clearAuthError } from '../../redux/slices/authSlice';\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\nimport CarIcon from '../../svg/logo.png';\nimport { Button, IconButton, InputAdornment, Link, TextField, Typography } from '@material-ui/core';\nimport { Paper } from '@material-ui/core';\nimport { useAuthPageStyles } from '../../styles/muiStyles';\n\nimport PersonIcon from '@material-ui/icons/Person';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport LockIcon from '@material-ui/icons/Lock';\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\nimport DemoCreds from '../../components/DemoCreds';\nimport { signupLink } from '../../Links';\nimport { Link as RouterLink } from 'react-router-dom';\nimport ErrorBox from '../../components/ErrorBox';\n\ninterface InputValues {\n  username: string;\n  password: string;\n}\n\nconst validationSchema = yup.object({\n  username: yup.string().required('Required'),\n  password: yup.string().required('Required'),\n});\n\nconst LoginPage = () => {\n  const classes = useAuthPageStyles();\n  const dispatch = useDispatch();\n  const { loading, error } = useSelector(selectAuthState);\n  const [showPass, setShowPass] = useState<boolean>(false);\n  const { register, handleSubmit, errors } = useForm({\n    mode: 'onChange',\n    resolver: yupResolver(validationSchema),\n  });\n  const history = useHistory();\n\n  const handleLogin = ({ username, password }: InputValues) => {\n    dispatch(login({ username, password }, history));\n  };\n\n  const handleCancel = () => {\n    dispatch(cancel());\n  };\n\n  return (\n    <div>\n      <Paper className={classes.root} elevation={2}>\n        <form onSubmit={handleSubmit(handleLogin)} className={classes.form}>\n          <img src={CarIcon} alt='bug-logo' className={classes.titleLogo} />\n          <Typography variant='body1' className={classes.headerText}>\n            Вход\n          </Typography>\n          <div className={classes.inputField}>\n            <TextField\n              required\n              fullWidth\n              inputRef={register}\n              type='text'\n              label='Логин'\n              name='username'\n              variant='outlined'\n              error={'username' in errors}\n              helperText={'username' in errors ? errors.username.message : ''}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position='start'>\n                    <PersonIcon className={classes.iconColor} />\n                  </InputAdornment>\n                ),\n              }}\n            />\n          </div>\n          <div className={classes.inputField}>\n            <TextField\n              required\n              fullWidth\n              inputRef={register}\n              type={showPass ? 'text' : 'password'}\n              label='Пароль'\n              name='password'\n              variant='outlined'\n              error={'password' in errors}\n              helperText={'password' in errors ? errors.password.message : ''}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position='end'>\n                    <IconButton size='small' onClick={() => setShowPass(prevState => !prevState)}>\n                      {showPass ? <VisibilityOffIcon /> : <VisibilityIcon />}\n                    </IconButton>\n                  </InputAdornment>\n                ),\n                startAdornment: (\n                  <InputAdornment position='start'>\n                    <LockIcon className={classes.iconColor} />\n                  </InputAdornment>\n                ),\n              }}\n            />\n          </div>\n          <Button\n            color='inherit'\n            variant='contained'\n            size='large'\n            fullWidth\n            startIcon={<ExitToAppIcon />}\n            type='submit'\n            className={classes.submitButton}\n            disabled={loading}\n          >\n            Войти\n          </Button>\n          <DemoCreds />\n        </form>\n        <Typography variant='body1' className={classes.footerText}>\n          Нет аккаунта?{' '}\n          <Link color='primary' to={signupLink} component={RouterLink}>\n            Зарегистрироваться\n          </Link>\n        </Typography>\n        {error && <ErrorBox errorMsg={error} clearErrorMsg={() => dispatch(clearAuthError())} />}\n      </Paper>\n    </div>\n  );\n};\n\nexport default LoginPage;\n","C:\\study\\car-ads\\client\\src\\pages\\Auth\\SignUpPage.tsx",["127"],"import React, { useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectAuthState, cancel, signup, setAuthError, clearAuthError } from '../../redux/slices/authSlice';\n\nimport * as yup from 'yup';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\nimport CarIcon from '../../svg/logo.png';\nimport { Button, IconButton, InputAdornment, Link, TextField, Typography } from '@material-ui/core';\nimport { Paper } from '@material-ui/core';\nimport { useAuthPageStyles } from '../../styles/muiStyles';\n\nimport PersonIcon from '@material-ui/icons/Person';\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport LockIcon from '@material-ui/icons/Lock';\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\n\nimport { loginLink } from '../../Links';\nimport { Link as RouterLink, useHistory } from 'react-router-dom';\nimport ErrorBox from '../../components/ErrorBox';\n\ninterface InputValues {\n  username: string;\n  password: string;\n  confirmPassword: string;\n}\n\nconst validationSchema = yup.object({\n  username: yup\n    .string()\n    .required('Required')\n    .max(20, 'Должно быть не более 20 символов')\n    .min(3, 'Должно быть не менее 3 символов')\n    .matches(/^[a-zA-Z0-9-_]*$/, 'Допускаются только буквы, тире и символы подчеркивания'),\n  password: yup.string().required('Required').min(6, 'Должно быть не менее 6 символов'),\n  confirmPassword: yup.string().required('Required').min(6, 'Должно быть не менее 6 символов'),\n});\n\nconst SignupPage = () => {\n  const classes = useAuthPageStyles();\n  const dispatch = useDispatch();\n  const { loading, error } = useSelector(selectAuthState);\n  const [showPass, setShowPass] = useState<boolean>(false);\n  const [showConfirmPass, setShowConfirmPass] = useState<boolean>(false);\n\n  const { register, handleSubmit, errors } = useForm({\n    mode: 'onChange',\n    resolver: yupResolver(validationSchema),\n  });\n  const history = useHistory();\n  const handleSignUp = ({ username, password, confirmPassword }: InputValues) => {\n    if (password !== confirmPassword) {\n      return dispatch(setAuthError('Пароли не совпадают'));\n    }\n    dispatch(signup({ username, password }, history));\n  };\n\n  const handleCancel = () => {\n    dispatch(cancel());\n  };\n\n  return (\n    <div>\n      <Paper className={classes.root} elevation={2}>\n        <form onSubmit={handleSubmit(handleSignUp)} className={classes.form}>\n          <img src={CarIcon} alt='bug-logo' className={classes.titleLogo} />\n          <Typography variant='body1' className={classes.headerText}>\n            Регистрация\n          </Typography>\n          <div className={classes.inputField}>\n            <TextField\n              required\n              fullWidth\n              inputRef={register}\n              type='text'\n              name='username'\n              label='Логин'\n              variant='outlined'\n              error={'username' in errors}\n              helperText={'username' in errors ? errors.username.message : ''}\n              InputProps={{\n                startAdornment: (\n                  <InputAdornment position='start'>\n                    <PersonIcon className={classes.iconColor} />\n                  </InputAdornment>\n                ),\n              }}\n            />\n          </div>\n          <div className={classes.inputField}>\n            <TextField\n              required\n              fullWidth\n              inputRef={register}\n              type={showPass ? 'text' : 'password'}\n              name='password'\n              label='Пароль'\n              variant='outlined'\n              error={'password' in errors}\n              helperText={'password' in errors ? errors.password.message : ''}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position='end'>\n                    <IconButton size='small' onClick={() => setShowPass(prevState => !prevState)}>\n                      {showPass ? <VisibilityOffIcon /> : <VisibilityIcon />}\n                    </IconButton>\n                  </InputAdornment>\n                ),\n                startAdornment: (\n                  <InputAdornment position='start'>\n                    <LockIcon className={classes.iconColor} />\n                  </InputAdornment>\n                ),\n              }}\n            />\n          </div>\n          <div className={classes.inputField}>\n            <TextField\n              required\n              fullWidth\n              inputRef={register}\n              type={showConfirmPass ? 'text' : 'password'}\n              label='Подтверждение пароля'\n              name='confirmPassword'\n              variant='outlined'\n              error={'confirmPassword' in errors}\n              helperText={'confirmPassword' in errors ? errors.confirmPassword.message : ''}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position='end'>\n                    <IconButton size='small' onClick={() => setShowConfirmPass(prevState => !prevState)}>\n                      {showConfirmPass ? <VisibilityOffIcon /> : <VisibilityIcon />}\n                    </IconButton>\n                  </InputAdornment>\n                ),\n                startAdornment: (\n                  <InputAdornment position='start'>\n                    <LockIcon className={classes.iconColor} />\n                  </InputAdornment>\n                ),\n              }}\n            />\n          </div>\n          <Button\n            color='inherit'\n            variant='contained'\n            size='large'\n            fullWidth\n            startIcon={<PersonAddIcon />}\n            type='submit'\n            className={classes.submitButton}\n            disabled={loading}\n          >\n            Зарегистрироваться\n          </Button>\n        </form>\n        <Typography variant='body1' className={classes.footerText}>\n          Уже есть аккаунт?{' '}\n          <Link color='primary' to={loginLink} component={RouterLink}>\n            Войти\n          </Link>\n        </Typography>\n        {error && <ErrorBox errorMsg={error} clearErrorMsg={() => dispatch(clearAuthError())} />}\n      </Paper>\n    </div>\n  );\n};\n\nexport default SignupPage;\n","C:\\study\\car-ads\\client\\src\\pages\\Main\\PersonalAccountPage.tsx",["128"],"import React from 'react';\nimport { usePersonalAccountStyles } from '../../styles/muiStyles';\nimport { Paper, Tab } from '@material-ui/core';\nimport Tabs from '@material-ui/core/Tabs';\nimport TabPanel from '../../components/TabPanel';\n\nconst PersonalAccountPage = () => {\n  const classes = usePersonalAccountStyles();\n  const [value, setValue] = React.useState(0);\n  const handleChange = (event: any, newValue: React.SetStateAction<number>) => {\n    setValue(newValue);\n  };\n  return (\n    <div className={classes.root}>\n      <Paper className={classes.paper}>\n        <div className={classes.tabs}>\n          <Tabs value={value} onChange={handleChange}>\n            <Tab label='Объявления' />\n            <Tab label='Настройки' />\n          </Tabs>\n          <TabPanel index={0} value={value}>\n            Тут мои объявления\n          </TabPanel>\n          <TabPanel index={1} value={value}>\n            Тут мои найстройки\n          </TabPanel>\n        </div>\n      </Paper>\n    </div>\n  );\n};\n\nexport default PersonalAccountPage;\n","C:\\study\\car-ads\\client\\src\\pages\\Main\\NotFoundPage.tsx",[],"C:\\study\\car-ads\\client\\src\\pages\\Main\\MainPage.tsx",[],"C:\\study\\car-ads\\client\\src\\pages\\Main\\AppendAdPage.tsx",["129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144"],"import { Button, Paper, TextField, Typography } from '@material-ui/core';\nimport { Image } from '@material-ui/icons';\nimport { on } from 'cluster';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeBrand, changeModel, changeYear, selectAppendState } from '../../redux/slices/appendSlice';\nimport { useAppendPageStyles } from '../../styles/muiStyles';\nimport DirectionsCarIcon from '@material-ui/icons/DirectionsCar';\nimport { Autocomplete } from '@material-ui/lab';\nimport ImageUploading, { ImageListType } from 'react-images-uploading';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport PublishIcon from '@material-ui/icons/Publish';\nimport AutoComplete from '../../components/AutoCompletes/AutoComplete';\nimport ImageUploader from '../../components/ImageUploader';\n\nconst AppendAdPage = () => {\n  const dispatch = useDispatch();\n  const classes = useAppendPageStyles();\n  const { showModels, showYear, showBody, brandValue, modelValue, yearValue, bodyValue } = useSelector(selectAppendState);\n  const [images, setImages] = useState([]);\n  const [selectedBrand, setSelectedBrand] = useState(null);\n  const [selectedModel, setSelectedModel] = useState(null);\n  const [selectedYear, setSelectedYear] = useState(null);\n  const [selectedBody, setSelectedBody] = useState(null);\n  const maxNumber = 40;\n\n  const handleBrandChange = (_: any, value: any) => {\n    dispatch(changeBrand(value));\n    // setSelectedBrand(value);\n    // if ((selectedModel as any)?.name !== value?.name) {\n    //   setSelectedModel(null);\n    //   setSelectedYear(null);\n    //   setSelectedBody(null);\n    // }\n  };\n\n  const handleModelChange = (_: any, value: any) => {\n    dispatch(changeModel(value));\n    // setSelectedModel(value);\n    // if ((selectedYear as any)?.name !== value?.name) {\n    //   setSelectedYear(null);\n    //   setSelectedBody(null);\n    // }\n  };\n\n  const handleYearChange = (_: any, value: any) => {\n      dispatch(changeYear(value));\n    //   setSelectedYear(value);\n    //\n    // if ((selectedBody as any)?.name !== value?.name) {\n    //   setSelectedBody(null);\n    // }\n  };\n\n  const handleBodyChange = (_: any, value: any) => {\n    const a = 1;\n  };\n\n  const onImageUploaderChange = (imageList: ImageListType, addUpdateIndex: number[] | undefined) => {\n    console.log(imageList, addUpdateIndex);\n    setImages(imageList as never[]);\n  };\n\n  return (\n    <>\n      <div className={classes.root}>\n        <Paper className={classes.headerPaper}>\n          <DirectionsCarIcon fontSize='large' style={{ fontSize: '4.5em', marginRight: '0.2em' }} />\n          <h1>Продайте свой автомобиль</h1>\n        </Paper>\n        <Paper className={classes.paper}>\n          <div style={{ width: '500px' }}>\n            <h2>Основная информация</h2>\n            <p style={{ display: 'inline' }}>\n              <h3>Выберите марку авто</h3>\n              <Autocomplete\n                id='category'\n                style={{ marginBottom: 8 }}\n                options={testBrand}\n                getOptionLabel={option => option.name}\n                getOptionSelected={(option, value) => option.name === value.name}\n                onChange={handleBrandChange}\n                renderInput={params => <TextField {...params} label='Марка' variant='outlined' />}\n                renderOption={options => {\n                  return (\n                    <>\n                      <img style={{ width: '40px', height: '40px' }} src={options.imageUrl} alt='' />\n                      {options.name}\n                    </>\n                  );\n                }}\n              />\n            </p>\n            {showModels ? (\n              <p>\n                <h3>Выберите модель</h3>\n                <Autocomplete\n                  id='subcategory'\n                  options={testModel}\n                  getOptionLabel={option => option.name}\n                  getOptionSelected={(option, value) => option.name === value.name}\n                  value={modelValue}\n                  onChange={handleModelChange}\n                  renderInput={params => <TextField {...params} label='Модель' variant='outlined' />}\n                />\n              </p>\n            ) : null}\n            {showYear ? (\n              <p>\n                <h3>Выберите год выпуска авто</h3>\n                <Autocomplete\n                  id='year'\n                  options={testYear}\n                  getOptionLabel={option => option.name}\n                  getOptionSelected={(option, value) => option.name === value.name}\n                  value={yearValue}\n                  onChange={handleYearChange}\n                  renderInput={params => <TextField {...params} label='Год выпуска' variant='outlined' />}\n                />\n              </p>\n            ) : null}\n            {showBody ? (\n              <p>\n                <h3>Выберите тип кузова</h3>\n                <Autocomplete\n                  id='body'\n                  options={testBody}\n                  getOptionLabel={option => option.name}\n                  getOptionSelected={(option, value) => option.name === value.name}\n                  value={bodyValue}\n                  onChange={handleBodyChange}\n                  renderInput={params => <TextField {...params} label='Тип кузова' variant='outlined' />}\n                />\n              </p>\n            ) : null}\n          </div>\n        </Paper>\n        <Paper className={classes.paper}>\n          <div style={{ width: '500px' }}>\n            <h2>Добавьте фото</h2>\n            <ImageUploader maxNumber={maxNumber} onChange={onImageUploaderChange} images={images} />\n          </div>\n        </Paper>\n      </div>\n    </>\n  );\n};\n\nconst testBrand = [\n  { name: 'Opel', imageUrl: 'https://avatars.mds.yandex.net/get-verba/937147/2a00000179b3e4e1c4c28087a58eb0595a12/logo' },\n  { name: 'BMW', imageUrl: 'https://avatars.mds.yandex.net/get-verba/1030388/2a00000179af8e23344d871bcfa394f0c60d/logo' },\n  { name: 'Toyota', imageUrl: 'https://avatars.mds.yandex.net/get-verba/1030388/2a00000179af8e23344d871bcfa394f0c60d/logo' },\n];\n\nconst testModel = [{ name: 'Vectra' }, { name: 'Selena' }, { name: 'm3' }];\n\nconst testYear = [{ name: '2021' }, { name: '2000' }, { name: '3000' }];\n\nconst testBody = [{ name: 'Седан' }, { name: 'Кроссовер' }, { name: 'Лифтбек' }];\n\nexport default AppendAdPage;\n","C:\\study\\car-ads\\client\\src\\BackEndUrl.ts",[],"C:\\study\\car-ads\\client\\src\\components\\ErrorBox.tsx",[],"C:\\study\\car-ads\\client\\src\\components\\DemoCreds.tsx",[],"C:\\study\\car-ads\\client\\src\\components\\TabPanel.tsx",["145"],"import { Box } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport React from 'react';\n\nconst TabPanel = (props: any) => {\n  const { children, value, index, ...other } = props;\n  return (\n    <div role='tabpanel' hidden={value !== index} id={`simple-tabpanel-${index}`} aria-labelledby={`simple-tab-${index}`} {...other}>\n      {value === index && (\n        <Box p={3}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n};\n\nexport default TabPanel;\n","C:\\study\\car-ads\\client\\src\\components\\AutoCompletes\\AutoComplete.tsx",[],"C:\\study\\car-ads\\client\\src\\components\\ImageUploader.tsx",[],{"ruleId":"146","severity":1,"message":"147","line":5,"column":5,"nodeType":"148","messageId":"149","endLine":5,"endColumn":10},{"ruleId":"146","severity":1,"message":"147","line":565,"column":3,"nodeType":"148","messageId":"149","endLine":565,"endColumn":8},{"ruleId":"150","severity":1,"message":"151","line":14,"column":17,"nodeType":"152","messageId":"153","endLine":14,"endColumn":20,"suggestions":"154"},{"ruleId":"150","severity":1,"message":"151","line":15,"column":17,"nodeType":"152","messageId":"153","endLine":15,"endColumn":20,"suggestions":"155"},{"ruleId":"150","severity":1,"message":"151","line":16,"column":16,"nodeType":"152","messageId":"153","endLine":16,"endColumn":19,"suggestions":"156"},{"ruleId":"150","severity":1,"message":"151","line":17,"column":16,"nodeType":"152","messageId":"153","endLine":17,"endColumn":19,"suggestions":"157"},{"ruleId":"146","severity":1,"message":"158","line":49,"column":9,"nodeType":"148","messageId":"149","endLine":49,"endColumn":21},{"ruleId":"146","severity":1,"message":"158","line":60,"column":9,"nodeType":"148","messageId":"149","endLine":60,"endColumn":21},{"ruleId":"150","severity":1,"message":"151","line":10,"column":32,"nodeType":"152","messageId":"153","endLine":10,"endColumn":35,"suggestions":"159"},{"ruleId":"146","severity":1,"message":"160","line":19,"column":43,"nodeType":"148","messageId":"149","endLine":19,"endColumn":53},{"ruleId":"146","severity":1,"message":"161","line":21,"column":10,"nodeType":"148","messageId":"149","endLine":21,"endColumn":23},{"ruleId":"146","severity":1,"message":"162","line":21,"column":25,"nodeType":"148","messageId":"149","endLine":21,"endColumn":41},{"ruleId":"146","severity":1,"message":"163","line":22,"column":10,"nodeType":"148","messageId":"149","endLine":22,"endColumn":23},{"ruleId":"146","severity":1,"message":"164","line":22,"column":25,"nodeType":"148","messageId":"149","endLine":22,"endColumn":41},{"ruleId":"150","severity":1,"message":"151","line":27,"column":33,"nodeType":"152","messageId":"153","endLine":27,"endColumn":36,"suggestions":"165"},{"ruleId":"150","severity":1,"message":"151","line":27,"column":45,"nodeType":"152","messageId":"153","endLine":27,"endColumn":48,"suggestions":"166"},{"ruleId":"150","severity":1,"message":"151","line":37,"column":33,"nodeType":"152","messageId":"153","endLine":37,"endColumn":36,"suggestions":"167"},{"ruleId":"150","severity":1,"message":"151","line":37,"column":45,"nodeType":"152","messageId":"153","endLine":37,"endColumn":48,"suggestions":"168"},{"ruleId":"150","severity":1,"message":"151","line":46,"column":32,"nodeType":"152","messageId":"153","endLine":46,"endColumn":35,"suggestions":"169"},{"ruleId":"150","severity":1,"message":"151","line":46,"column":44,"nodeType":"152","messageId":"153","endLine":46,"endColumn":47,"suggestions":"170"},{"ruleId":"150","severity":1,"message":"151","line":49,"column":26,"nodeType":"152","messageId":"153","endLine":49,"endColumn":29,"suggestions":"171"},{"ruleId":"150","severity":1,"message":"151","line":54,"column":32,"nodeType":"152","messageId":"153","endLine":54,"endColumn":35,"suggestions":"172"},{"ruleId":"146","severity":1,"message":"173","line":54,"column":37,"nodeType":"148","messageId":"149","endLine":54,"endColumn":47},{"ruleId":"150","severity":1,"message":"151","line":54,"column":44,"nodeType":"152","messageId":"153","endLine":54,"endColumn":47,"suggestions":"174"},{"ruleId":"146","severity":1,"message":"175","line":55,"column":11,"nodeType":"148","messageId":"149","endLine":55,"endColumn":12},{"ruleId":"150","severity":1,"message":"151","line":5,"column":26,"nodeType":"152","messageId":"153","endLine":5,"endColumn":29,"suggestions":"176"},"unused-imports/no-unused-vars","'theme' is defined but never used. Allowed unused args must match /^_/u.","Identifier","unusedVar","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["177","178"],["179","180"],["181","182"],["183","184"],"'handleCancel' is assigned a value but never used. Allowed unused vars must match /^_/u.",["185","186"],"'brandValue' is assigned a value but never used. Allowed unused vars must match /^_/u.","'selectedBrand' is assigned a value but never used. Allowed unused vars must match /^_/u.","'setSelectedBrand' is assigned a value but never used. Allowed unused vars must match /^_/u.","'selectedModel' is assigned a value but never used. Allowed unused vars must match /^_/u.","'setSelectedModel' is assigned a value but never used. Allowed unused vars must match /^_/u.",["187","188"],["189","190"],["191","192"],["193","194"],["195","196"],["197","198"],["199","200"],["201","202"],"'value' is defined but never used. Allowed unused args must match /^_/u.",["203","204"],"'a' is assigned a value but never used. Allowed unused vars must match /^_/u.",["205","206"],{"messageId":"207","fix":"208","desc":"209"},{"messageId":"210","fix":"211","desc":"212"},{"messageId":"207","fix":"213","desc":"209"},{"messageId":"210","fix":"214","desc":"212"},{"messageId":"207","fix":"215","desc":"209"},{"messageId":"210","fix":"216","desc":"212"},{"messageId":"207","fix":"217","desc":"209"},{"messageId":"210","fix":"218","desc":"212"},{"messageId":"207","fix":"219","desc":"209"},{"messageId":"210","fix":"220","desc":"212"},{"messageId":"207","fix":"221","desc":"209"},{"messageId":"210","fix":"222","desc":"212"},{"messageId":"207","fix":"223","desc":"209"},{"messageId":"210","fix":"224","desc":"212"},{"messageId":"207","fix":"225","desc":"209"},{"messageId":"210","fix":"226","desc":"212"},{"messageId":"207","fix":"227","desc":"209"},{"messageId":"210","fix":"228","desc":"212"},{"messageId":"207","fix":"229","desc":"209"},{"messageId":"210","fix":"230","desc":"212"},{"messageId":"207","fix":"231","desc":"209"},{"messageId":"210","fix":"232","desc":"212"},{"messageId":"207","fix":"233","desc":"209"},{"messageId":"210","fix":"234","desc":"212"},{"messageId":"207","fix":"235","desc":"209"},{"messageId":"210","fix":"236","desc":"212"},{"messageId":"207","fix":"237","desc":"209"},{"messageId":"210","fix":"238","desc":"212"},{"messageId":"207","fix":"239","desc":"209"},{"messageId":"210","fix":"240","desc":"212"},"suggestUnknown",{"range":"241","text":"242"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"241","text":"243"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"244","text":"242"},{"range":"244","text":"243"},{"range":"245","text":"242"},{"range":"245","text":"243"},{"range":"246","text":"242"},{"range":"246","text":"243"},{"range":"247","text":"242"},{"range":"247","text":"243"},{"range":"248","text":"242"},{"range":"248","text":"243"},{"range":"249","text":"242"},{"range":"249","text":"243"},{"range":"250","text":"242"},{"range":"250","text":"243"},{"range":"251","text":"242"},{"range":"251","text":"243"},{"range":"252","text":"242"},{"range":"252","text":"243"},{"range":"253","text":"242"},{"range":"253","text":"243"},{"range":"254","text":"242"},{"range":"254","text":"243"},{"range":"255","text":"242"},{"range":"255","text":"243"},{"range":"256","text":"242"},{"range":"256","text":"243"},{"range":"257","text":"242"},{"range":"257","text":"243"},[584,587],"unknown","never",[613,616],[641,644],[669,672],[396,399],[1381,1384],[1393,1396],[1672,1675],[1684,1687],[1928,1931],[1940,1943],[2031,2034],[2133,2136],[2145,2148],[149,152]]